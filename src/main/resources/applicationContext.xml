<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
        scope：定义bean的作用范围
            singleton: 单例，IoC容器中只有一个该类对象，默认是单例
                对象出生：当创建容器是，对象就被创建了。
                对象活着：只要容器在，对象就一直活着
                对象死亡：当销毁容器时，对象就被销毁了。
                总结：单例模式的bean对象生命周期与容器相同
            prototype：原型（多例），每次使用该类的对象（getBean）,都返回一个新的对象
                对象出生：当使用对象时，创建新的对象实例
                对象活着：只要对象在使用中，就一直活着
                对象死亡：当对象长时间不用时，被Java的垃圾回收期回收了。
                总结：多例模式的bean对象，Spring框架只负责创建，不负责销毁
    -->
    <!--ID标识对象，class是类的全限定类名-->
    <bean id="accountDao" class="com.lagou.edu.dao.impl.JdbcAccountDaoImpl" init-method="init" destroy-method="destory">
        <!--set注入使用property标签，
        如果注入的是另外一个bean，那么使用ref属性
        如果注入的是普通属性，使用value属性-->
        <!--        <property name="ConnectionUtils" ref="connectionUtils"></property>-->
        <!--        <property name="name" value="sag"></property>-->
        <!--        <property name="sex" value="1"></property>-->
        <!--        <property name="money" value="1000"></property>-->
        <!--无参构造注入，name:按照参数名称注入，index按照参数索引位置注入-->
        <!--        <constructor-arg index="0" ref="connectionUtils"/>-->
        <!--        <constructor-arg index="1" value="sag"/>-->
        <!--        <constructor-arg index="2" value="1"/>-->
        <!--        <constructor-arg index="3" value="111111"/>-->
        <constructor-arg name="connectionUtils" ref="connectionUtils"/>
        <constructor-arg name="name" value="sag"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="money" value="111111"/>
        <property name="myArray">
            <array>
                <value>value1</value>
                <value>value2</value>
                <value>value3</value>
            </array>
        </property>
        <property name="myMap">
            <map>
                <entry key="key1" value="value1"></entry>
                <entry key="key2" value="value2"></entry>
            </map>
        </property>
        <property name="mySet">
            <set>
                <value>value1</value>
                <value>value2</value>
            </set>
        </property>
        <property name="myProperties">
            <props>
                <prop key="prop1">value1</prop>
                <prop key="prop2">value2</prop>
            </props>
        </property>
        <property name="myList">
            <list>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </list>
        </property>
    </bean>
    <bean id="transferService" class="com.lagou.edu.service.impl.TransferServiceImpl">
        <!--set + name 之后锁定到传值的set方法了，通过反射技术可以调用该方法传入对应的值-->
        <property name="AccountDao" ref="accountDao"></property>
    </bean>


    <!--事务管理器-->
    <bean id="transactionManager" class="com.lagou.edu.utils.TransactionManager">
        <!--set注入，使用property标签，如果注入的是另外一个bean，那么使用ref属性，
        如果注入的是普通属性，使用的是value属性-->
        <property name="ConnectionUtils" ref="connectionUtils"></property>
    </bean>
    <!--代理工厂-->
    <bean id="proxyFactory" class="com.lagou.edu.others.ProxyFactory">
        <property name="TransactionManager" ref="transactionManager"></property>
    </bean>
    <!--Spring IoC 实例化bean的三种方式-->
    <!--方式1：使用无参构造器-->
    <!--<bean id="connectionUtils" class="com.lagou.edu.utils.ConnectionUtils"></bean>-->
    <!--另外两种方式是为了我们自己new的对象加入到Spring IoC的容器管理-->
    <!--方式2：静态方法-->
    <!--<bean id="connectionUtils" class="com.lagou.edu.factory.CreateBeanFactory" factory-method="getInstanceStatic"/>-->
    <!--方式3：实例化方法-->
    <bean id="createBeanFactory" class="com.lagou.edu.factory.CreateBeanFactory"></bean>
    <bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"></bean>


</beans>